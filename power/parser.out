Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> S
Rule 1     S -> E
Rule 2     E -> E PLUS T
Rule 3     E -> E MINUS T
Rule 4     E -> T
Rule 5     T -> T MUL F
Rule 6     T -> T DIV F
Rule 7     F -> F POWER G
Rule 8     F -> G
Rule 9     T -> F
Rule 10    G -> NUMBER
Rule 11    G -> LPAR E RPAR

Terminals, with rules where they appear

DIV                  : 6
LPAR                 : 11
MINUS                : 3
MUL                  : 5
NUMBER               : 10
PLUS                 : 2
POWER                : 7
RPAR                 : 11
error                : 

Nonterminals, with rules where they appear

E                    : 1 2 3 11
F                    : 5 6 7 9
G                    : 7 8
S                    : 0
T                    : 2 3 4 5 6

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . E
    (2) E -> . E PLUS T
    (3) E -> . E MINUS T
    (4) E -> . T
    (5) T -> . T MUL F
    (6) T -> . T DIV F
    (9) T -> . F
    (7) F -> . F POWER G
    (8) F -> . G
    (10) G -> . NUMBER
    (11) G -> . LPAR E RPAR

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 7

    S                              shift and go to state 1
    E                              shift and go to state 2
    T                              shift and go to state 3
    F                              shift and go to state 4
    G                              shift and go to state 5

state 1

    (0) S' -> S .



state 2

    (1) S -> E .
    (2) E -> E . PLUS T
    (3) E -> E . MINUS T

    $end            reduce using rule 1 (S -> E .)
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9


state 3

    (4) E -> T .
    (5) T -> T . MUL F
    (6) T -> T . DIV F

    PLUS            reduce using rule 4 (E -> T .)
    MINUS           reduce using rule 4 (E -> T .)
    $end            reduce using rule 4 (E -> T .)
    RPAR            reduce using rule 4 (E -> T .)
    MUL             shift and go to state 10
    DIV             shift and go to state 11


state 4

    (9) T -> F .
    (7) F -> F . POWER G

    MUL             reduce using rule 9 (T -> F .)
    DIV             reduce using rule 9 (T -> F .)
    PLUS            reduce using rule 9 (T -> F .)
    MINUS           reduce using rule 9 (T -> F .)
    $end            reduce using rule 9 (T -> F .)
    RPAR            reduce using rule 9 (T -> F .)
    POWER           shift and go to state 12


state 5

    (8) F -> G .

    POWER           reduce using rule 8 (F -> G .)
    MUL             reduce using rule 8 (F -> G .)
    DIV             reduce using rule 8 (F -> G .)
    PLUS            reduce using rule 8 (F -> G .)
    MINUS           reduce using rule 8 (F -> G .)
    $end            reduce using rule 8 (F -> G .)
    RPAR            reduce using rule 8 (F -> G .)


state 6

    (10) G -> NUMBER .

    POWER           reduce using rule 10 (G -> NUMBER .)
    MUL             reduce using rule 10 (G -> NUMBER .)
    DIV             reduce using rule 10 (G -> NUMBER .)
    PLUS            reduce using rule 10 (G -> NUMBER .)
    MINUS           reduce using rule 10 (G -> NUMBER .)
    $end            reduce using rule 10 (G -> NUMBER .)
    RPAR            reduce using rule 10 (G -> NUMBER .)


state 7

    (11) G -> LPAR . E RPAR
    (2) E -> . E PLUS T
    (3) E -> . E MINUS T
    (4) E -> . T
    (5) T -> . T MUL F
    (6) T -> . T DIV F
    (9) T -> . F
    (7) F -> . F POWER G
    (8) F -> . G
    (10) G -> . NUMBER
    (11) G -> . LPAR E RPAR

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 7

    E                              shift and go to state 13
    T                              shift and go to state 3
    F                              shift and go to state 4
    G                              shift and go to state 5

state 8

    (2) E -> E PLUS . T
    (5) T -> . T MUL F
    (6) T -> . T DIV F
    (9) T -> . F
    (7) F -> . F POWER G
    (8) F -> . G
    (10) G -> . NUMBER
    (11) G -> . LPAR E RPAR

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 7

    T                              shift and go to state 14
    F                              shift and go to state 4
    G                              shift and go to state 5

state 9

    (3) E -> E MINUS . T
    (5) T -> . T MUL F
    (6) T -> . T DIV F
    (9) T -> . F
    (7) F -> . F POWER G
    (8) F -> . G
    (10) G -> . NUMBER
    (11) G -> . LPAR E RPAR

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 7

    T                              shift and go to state 15
    F                              shift and go to state 4
    G                              shift and go to state 5

state 10

    (5) T -> T MUL . F
    (7) F -> . F POWER G
    (8) F -> . G
    (10) G -> . NUMBER
    (11) G -> . LPAR E RPAR

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 7

    F                              shift and go to state 16
    G                              shift and go to state 5

state 11

    (6) T -> T DIV . F
    (7) F -> . F POWER G
    (8) F -> . G
    (10) G -> . NUMBER
    (11) G -> . LPAR E RPAR

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 7

    F                              shift and go to state 17
    G                              shift and go to state 5

state 12

    (7) F -> F POWER . G
    (10) G -> . NUMBER
    (11) G -> . LPAR E RPAR

    NUMBER          shift and go to state 6
    LPAR            shift and go to state 7

    G                              shift and go to state 18

state 13

    (11) G -> LPAR E . RPAR
    (2) E -> E . PLUS T
    (3) E -> E . MINUS T

    RPAR            shift and go to state 19
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9


state 14

    (2) E -> E PLUS T .
    (5) T -> T . MUL F
    (6) T -> T . DIV F

    PLUS            reduce using rule 2 (E -> E PLUS T .)
    MINUS           reduce using rule 2 (E -> E PLUS T .)
    $end            reduce using rule 2 (E -> E PLUS T .)
    RPAR            reduce using rule 2 (E -> E PLUS T .)
    MUL             shift and go to state 10
    DIV             shift and go to state 11


state 15

    (3) E -> E MINUS T .
    (5) T -> T . MUL F
    (6) T -> T . DIV F

    PLUS            reduce using rule 3 (E -> E MINUS T .)
    MINUS           reduce using rule 3 (E -> E MINUS T .)
    $end            reduce using rule 3 (E -> E MINUS T .)
    RPAR            reduce using rule 3 (E -> E MINUS T .)
    MUL             shift and go to state 10
    DIV             shift and go to state 11


state 16

    (5) T -> T MUL F .
    (7) F -> F . POWER G

    MUL             reduce using rule 5 (T -> T MUL F .)
    DIV             reduce using rule 5 (T -> T MUL F .)
    PLUS            reduce using rule 5 (T -> T MUL F .)
    MINUS           reduce using rule 5 (T -> T MUL F .)
    $end            reduce using rule 5 (T -> T MUL F .)
    RPAR            reduce using rule 5 (T -> T MUL F .)
    POWER           shift and go to state 12


state 17

    (6) T -> T DIV F .
    (7) F -> F . POWER G

    MUL             reduce using rule 6 (T -> T DIV F .)
    DIV             reduce using rule 6 (T -> T DIV F .)
    PLUS            reduce using rule 6 (T -> T DIV F .)
    MINUS           reduce using rule 6 (T -> T DIV F .)
    $end            reduce using rule 6 (T -> T DIV F .)
    RPAR            reduce using rule 6 (T -> T DIV F .)
    POWER           shift and go to state 12


state 18

    (7) F -> F POWER G .

    POWER           reduce using rule 7 (F -> F POWER G .)
    MUL             reduce using rule 7 (F -> F POWER G .)
    DIV             reduce using rule 7 (F -> F POWER G .)
    PLUS            reduce using rule 7 (F -> F POWER G .)
    MINUS           reduce using rule 7 (F -> F POWER G .)
    $end            reduce using rule 7 (F -> F POWER G .)
    RPAR            reduce using rule 7 (F -> F POWER G .)


state 19

    (11) G -> LPAR E RPAR .

    POWER           reduce using rule 11 (G -> LPAR E RPAR .)
    MUL             reduce using rule 11 (G -> LPAR E RPAR .)
    DIV             reduce using rule 11 (G -> LPAR E RPAR .)
    PLUS            reduce using rule 11 (G -> LPAR E RPAR .)
    MINUS           reduce using rule 11 (G -> LPAR E RPAR .)
    $end            reduce using rule 11 (G -> LPAR E RPAR .)
    RPAR            reduce using rule 11 (G -> LPAR E RPAR .)

